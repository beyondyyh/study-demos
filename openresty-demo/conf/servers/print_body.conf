server {
    listen 6602;
    server_name localhost;

    # 默认读取 body
    # lua_need_request_body on;
    # 强制请求 body 到临时文件中（仅仅为了演示）
    client_body_in_file_only on;

    # curl -i 'localhost:6602/test' -d 'beyondyyh'
    location /test {
        content_by_lua_block {
            -- 开启读取body
            ngx.req.read_body()
            local data = ngx.req.get_body_data()
            ngx.say("hello ", data)
        }
    }

    # curl -i 'localhost:6602/test2' -d 'beyondyyh'
    location /test2 {
        content_by_lua_block {
            function getFile(file_name)
                local f = assert(io.open(file_name, 'r'))
                local string = f:read("*md")
                f:close()
                return string
            end

            -- 开启读取body
            ngx.req.read_body()
            local data = ngx.req.get_body_data()
            if nil == data then
                local file_name = ngx.req.get_body_file()
                ngx.say(">> temp file: ", file_name)
                if file_name then
                    data = getFile(file_name)
                end
            end

            ngx.say("hello ", data)
        }
    }

    # 优雅处理响应体过大的输出的示例
    ## 可以利用 CHUNKED 格式，把一个大的响应体拆分成多个小的应答体，分批、有节制的响应给请求方。
    # curl -i 'localhost:6602/test3'
    location /test3 {
        content_by_lua_block {
            -- ngx.var.limit_rate = 1024*1024
            local file, err = io.open(ngx.config.prefix() .. "README.md", "r")
            if not file then
                ngx.log(ngx.ERR, "open file error:", err)
                ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
            end

            -- 按块读取本地文件内容（每次1KB），并以流式方式进行响应，Nginx服务可以稳定运行，并维持内存占用在 几MB 范畴
            local data
            while true do
                data = file:read(1024)
                if nil == data then
                    break
                end
                ngx.sleep(1) -- sleep 1s便于观察
                ngx.print(data)
                ngx.flush(true)
            end
            file:close()
        }
    }

    # 借助于 table 数据结构，输出内容本身是由各种碎片拼凑的，碎片数量庞大的case
    ## 也就是说当有非常多碎片数据时，没有必要一定连接成字符串后再进行输出。完全可以直接存放在 table 中，
    ## 用数组的方式把这些碎片数据统一起来，直接调用 ngx.print(table) 即可。这种方式效率更高，并且更容易被优化。
    location /test4 {
        content_by_lua_block {
            local table = {
                "hello, ",
                {"world: ", true, " or ", false,
                    {": ", nil}}
            }
            ngx.say(table)
            -- 输出：hello, world: true or false: nil
        }
    }
}