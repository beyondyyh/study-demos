server {
    # 监听端口，若你的6600端口已经被占用，则需要修改
    listen 6600;
    server_name localhost;

    location / {
        default_type text/html;

        content_by_lua_block {
            ngx.say("Hello, world")
        }
    }

    # 只允许内部调用，外部调用会抛404
    location = /sum {
        internal;
        content_by_lua_block {
            ngx.sleep(0.1)
            local args = ngx.req.get_uri_args()
            ngx.print(tonumber(args.a) + tonumber(args.b))
        }
    }
    location = /subduction {
        internal;
        content_by_lua_block {
            ngx.sleep(0.1)
            local args = ngx.req.get_uri_args()
            ngx.print(tonumber(args.a) - tonumber(args.b))
        }
    }

    # 并发执行测试
    location = /app/test_parallels {
        content_by_lua_block {
            local start_time = ngx.now()
            local res1, res2 = ngx.location.capture_multi( {
                            {"/sum", {args={a=3, b=8}}},
                            {"/subduction", {args={a=3, b=8}}}
                        })
            ngx.say("status:", res1.status, " response:", res1.body)
            ngx.say("status:", res2.status, " response:", res2.body)
            ngx.say("time used:", ngx.now() - start_time)
        }
    }
    # 串行执行测试
    location = /app/test_queue {
        content_by_lua_block {
            local start_time = ngx.now()
            local res1 = ngx.location.capture_multi( {
                            {"/sum", {args={a=3, b=8}}}
                        })
            local res2 = ngx.location.capture_multi( {
                            {"/subduction", {args={a=3, b=8}}}
                        })
            ngx.say("status:", res1.status, " response:", res1.body)
            ngx.say("status:", res2.status, " response:", res2.body)
            ngx.say("time used:", ngx.now() - start_time)
        }
    }

    # 内部跳转用ngx.exec，外部跳转用ngx.redirect
    location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {
        set $image_name $1;
        content_by_lua_block {
            ngx.exec('/download_internal/images/' .. ngx.var.image_name .. '.jpg')
        }
    }
    location /download_internal {
        internal;
        # 这里还可以有其他统一的 download 下载设置，例如限速等
        alias ../download;
        access_by_lua_block {
            ngx.say('I am download_internal')
        }
    }

    location = / {
        rewrite_by_lua_block {
            return ngx.redirect('/foo')
        }
    }
    location = /foo {
        internal;
        content_by_lua_block {
            ngx.say([[I am foo]])
        }
    }
}